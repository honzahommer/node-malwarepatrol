const crypto = require('crypto');
const fs = require('fs');
const rp = require('request-promise');

const pkg = require('../package');

class MalwarePatrol {
  constructor (source, dest) {
    if (!source) {
      console.error('Please set source.');
      process.exit(1);
    }

    if (!dest) {
      console.error('Please set dest.');
      process.exit(1);
    }

    this.source = source;
    this.dest = dest;
  }

  async download () {
    console.log(`${pkg.description}! (ver. ${pkg.version})`);

    console.log('Downloading block list...');
    const list = await rp.get(this.source);

    console.log('Downloading block list hash (only available to Basic Defense subscribers)...');
    const hash = await rp.get(`${this.source}&hash=1`).then(hash => hash.trim());

    console.log('');
    if (hash.split(/\r\n|\r|\n/).length > 1) {
      console.log('');
      console.warn('Your subscription doesnt support block list hash validation. Please consider upgrading to a Basic Defense subscription at: http://www.malwarepatrol.net/');
      console.warn('The integrity of the block list couldnt be verified.');
    } else if (crypto.createHash('md5').update(list).digest('hex') !== hash) {
      console.error('The block list download wasnt successfull, the integrity check failed!');
      console.error('');
      console.error('Finishing without updating the block list.  Please try again later.');
      process.exit(1);
    } else {
      console.log(`The block list integrity was verified successfully (MD5: ${hash}).`);
    }

    console.log(`Copying the block list to ${this.dest}`);
    fs.writeFileSync(this.dest, list);

    console.log('');
    console.log('The block list was successfully updated. You may need to restart or send a signal to force your application to reload the block list.');
    console.log('');

    console.log('All done!');
    process.exit(0);
  }
}

module.exports = function malwarePatrol (source, dest, options) {
  return new MalwarePatrol(source, dest, options);
};
