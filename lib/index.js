const crypto = require('crypto');
const fs = require('fs');
const rp = require('request-promise');

const pkg = require('../package');
const { env: { NODE_ENV = 'development' }, stderr } = process;

function logger(msg) {
  if (NODE_ENV === 'development') {
    stderr.write(msg);
  }
}

class MalwarePatrol {
  constructor (source, dest) {
    if (!source) {
      logger('Please set source.\n');
      process.exit(1);
    }

    this.source = source;
    this.dest = dest;
  }

  async download () {
    logger(`${pkg.description}! (ver. ${pkg.version})\n`);

    logger('Downloading block list... ');
    const list = await rp.get(this.source);
    logger('Done!\n');

    logger('Downloading block list hash (only available to Basic Defense subscribers)... ');
    const hash = await rp.get(`${this.source}&hash=1`).then(hash => hash.trim());
    logger('Done!\n\n');

    if (hash.split(/\r\n|\r|\n/).length > 1) {
      logger('\nYour subscription doesnt support block list hash validation.\n');
      logger('Please consider upgrading to a Basic Defense subscription at: http://www.malwarepatrol.net/\n');
      logger('The integrity of the block list couldnt be verified.\n');
    } else if (crypto.createHash('md5').update(list).digest('hex') !== hash) {
      logger('\nThe block list download wasnt successfull, the integrity check failed!\n');
      logger('Finishing without updating the block list.  Please try again later.\n');
      process.exit(1);
    } else {
      logger(`The block list integrity was verified successfully (MD5: ${hash}).\n`);
    }

    if (this.dest) {
      logger(`Copying the block list to ${this.dest}... `);
      fs.writeFileSync(this.dest, list);
      logger('Done!\n');
      logger('\nThe block list was successfully updated. You may need to restart or send a signal to force your application to reload the block list.\n\n');
    } else {
      console.log(list);
    }

    logger('All done!');
    process.exit(0);
  }

}

module.exports = function malwarePatrol (source, dest, options) {
  return new MalwarePatrol(source, dest, options);
};
